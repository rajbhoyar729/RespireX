import { z } from 'zod';

// Profile Schema
const profileSchema = z.object({
  username: z.string().min(3, 'Username must be at least 3 characters'),
  userId: z.string(), // Generated by us
  email: z.string().email('Invalid email address'),
});

// Login Info Schema
const loginInfoSchema = z.object({
  email: z.string().email('Invalid email address'),
  userId: z.string(),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

// Session Info Schema
const sessionInfoSchema = z.object({
  userId: z.string(),
  loginCount: z.number(), // Number of times the user has logged in
  lastLogin: z.date(),
});

// User Schema (now only contains essential user info)
export const userSchema = z.object({
  profile: profileSchema,
  loginInfo: loginInfoSchema,
  sessionInfo: sessionInfoSchema,
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

export type User = z.infer<typeof userSchema>;

// Audio Data Schema (separate collection)
export const audioDataSchema = z.object({
  userId: z.string(), // Reference to the user
  audioFile: z.string(), // Store the file path or URL
  timestamp: z.date(),
});

export type AudioData = z.infer<typeof audioDataSchema>;

// Disease Detection Schema (separate collection)
export const diseaseDetectionSchema = z.object({
  userId: z.string(), // Reference to the user
  diseaseDetected: z.string(),
  category: z.string(),
  timeOfDetection: z.date(),
  date: z.date(),
});

export type DiseaseDetection = z.infer<typeof diseaseDetectionSchema>;

// Chat History Schema (separate collection)
export const chatHistorySchema = z.object({
  userId: z.string(), // Reference to the user
  disease: z.string(),
  messages: z.array(
    z.object({
      sender: z.enum(['user', 'ai']),
      message: z.string(),
      timestamp: z.date(),
    })
  ),
});

export type ChatHistory = z.infer<typeof chatHistorySchema>;