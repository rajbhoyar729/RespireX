import { z } from 'zod';

// Profile Schema
const profileSchema = z.object({
  username: z.string().min(3, 'Username must be at least 3 characters'),
  userId: z.string(), // Generated by us
  email: z.string().email('Invalid email address'),
});

// Login Info Schema
const loginInfoSchema = z.object({
  email: z.string().email('Invalid email address'),
  userId: z.string(),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

// Audio Data Schema
const audioDataSchema = z.object({
  audioFile: z.string(), // Store the file path or URL
  timestamp: z.date(),
});

// Disease Detection Schema
const diseaseDetectionSchema = z.object({
  diseaseDetected: z.string(),
  category: z.string(),
  timeOfDetection: z.date(),
  date: z.date(),
});

// Chat History Schema
const chatHistorySchema = z.object({
  disease: z.string(),
  userId: z.string(),
  messages: z.array(
    z.object({
      sender: z.enum(['user', 'ai']),
      message: z.string(),
      timestamp: z.date(),
    })
  ),
});

// Session Info Schema
const sessionInfoSchema = z.object({
  userId: z.string(),
  loginCount: z.number(), // Number of times the user has logged in
  lastLogin: z.date(),
});

// User Schema
export const userSchema = z.object({
  profile: profileSchema,
  loginInfo: loginInfoSchema,
  audioData: z.array(audioDataSchema).optional(),
  diseaseDetections: z.array(diseaseDetectionSchema).optional(),
  chatHistory: z.array(chatHistorySchema).optional(),
  sessionInfo: sessionInfoSchema,
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

export type User = z.infer<typeof userSchema>;